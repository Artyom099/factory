package converter

import (
	servModel "github.com/Artyom099/factory/inventory/internal/model"
	repoModel "github.com/Artyom099/factory/inventory/internal/repository/model"
)

// converter service - repo layer

func PartGetServiceRequestToPartGetRepoRequest(req servModel.PartGetServiceRequest) repoModel.PartGetRepoRequest {
	return repoModel.PartGetRepoRequest{Uuid: req.Uuid}
}

func PartGetRepoResponseToPartGetServiceResponse(dto repoModel.PartGetRepoResponse) servModel.PartGetServiceResponse {
	var dims *servModel.Dimensions
	if dto.Part.Dimensions != nil {
		dims = &servModel.Dimensions{
			Length: dto.Part.Dimensions.Length,
			Width:  dto.Part.Dimensions.Width,
			Height: dto.Part.Dimensions.Height,
			Weight: dto.Part.Dimensions.Weight,
		}
	}

	var manuf *servModel.Manufacturer
	if dto.Part.Manufacturer != nil {
		manuf = &servModel.Manufacturer{
			Name:    dto.Part.Manufacturer.Name,
			Country: dto.Part.Manufacturer.Country,
			Website: dto.Part.Manufacturer.Website,
		}
	}

	return servModel.PartGetServiceResponse{
		Part: servModel.Part{
			Uuid:          dto.Part.Uuid,
			Name:          dto.Part.Name,
			Description:   dto.Part.Description,
			Price:         dto.Part.Price,
			StockQuantity: dto.Part.StockQuantity,
			Category:      servModel.Category(dto.Part.Category),
			Dimensions:    dims,
			Manufacturer:  manuf,
			Tags:          dto.Part.Tags,
		},
	}
}

func PartListServiceRequestToPartListRepoRequest(dto servModel.PartListServiceRequest) repoModel.PartListRepoRequest {
	return repoModel.PartListRepoRequest{}
}

func PartListRepoResponseToPartListServiceResponse(dto repoModel.PartListRepoResponse) servModel.PartListServiceResponse {
	parts := make([]servModel.Part, 0, len(dto.Parts))
	for _, rp := range dto.Parts {
		var dims *servModel.Dimensions
		if rp.Dimensions != nil {
			dims = &servModel.Dimensions{
				Length: rp.Dimensions.Length,
				Width:  rp.Dimensions.Width,
				Height: rp.Dimensions.Height,
				Weight: rp.Dimensions.Weight,
			}
		}

		var manuf *servModel.Manufacturer
		if rp.Manufacturer != nil {
			manuf = &servModel.Manufacturer{
				Name:    rp.Manufacturer.Name,
				Country: rp.Manufacturer.Country,
				Website: rp.Manufacturer.Website,
			}
		}

		parts = append(parts, servModel.Part{
			Uuid:          rp.Uuid,
			Name:          rp.Name,
			Description:   rp.Description,
			Price:         rp.Price,
			StockQuantity: rp.StockQuantity,
			Category:      servModel.Category(rp.Category),
			Dimensions:    dims,
			Manufacturer:  manuf,
			Tags:          rp.Tags,
			CreatedAt:     rp.CreatedAt,
			UpdatedAt:     rp.UpdatedAt,
		})
	}
	return servModel.PartListServiceResponse{Parts: parts}
}

func PartCreateServiceRequestToPartCreateRepoRequest(dto servModel.PartCreateServiceRequest) repoModel.PartCreateRepoRequest {
	var dims *repoModel.Dimensions
	if dto.Dimensions != nil {
		dims = &repoModel.Dimensions{
			Length: dto.Dimensions.Length,
			Width:  dto.Dimensions.Width,
			Height: dto.Dimensions.Height,
			Weight: dto.Dimensions.Weight,
		}
	}

	var manuf *repoModel.Manufacturer
	if dto.Manufacturer != nil {
		manuf = &repoModel.Manufacturer{
			Name:    dto.Manufacturer.Name,
			Country: dto.Manufacturer.Country,
			Website: dto.Manufacturer.Website,
		}
	}

	return repoModel.PartCreateRepoRequest{
		Part: repoModel.Part{
			//Uuid:          "", // Uuid is generated by repository; leave empty here
			Name:          dto.Name,
			Description:   dto.Description,
			Price:         dto.Price,
			StockQuantity: dto.StockQuantity,
			Category:      repoModel.Category(dto.Category),
			Dimensions:    dims,
			Manufacturer:  manuf,
			Tags:          dto.Tags,
			CreatedAt:     dto.CreatedAt,
			UpdatedAt:     dto.UpdatedAt,
		},
	}
}

func PartCreateRepoResponseToPartCreateServiceResponse(dto repoModel.PartCreateRepoResponse) servModel.PartCreateServiceResponse {
	return servModel.PartCreateServiceResponse{}
}
