// Code generated by ogen, DO NOT EDIT.

package order_v1

import (
	"github.com/go-faster/errors"
)

// Ref: #/components/schemas/bad_request_error
type BadRequestError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequestError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequestError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequestError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequestError) SetMessage(val string) {
	s.Message = val
}

func (*BadRequestError) cancelOrderRes() {}
func (*BadRequestError) createOrderRes() {}
func (*BadRequestError) getOrderRes()    {}
func (*BadRequestError) payOrderRes()    {}

// Ref: #/components/schemas/conflict_error
type ConflictError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ConflictError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ConflictError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ConflictError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ConflictError) SetMessage(val string) {
	s.Message = val
}

func (*ConflictError) cancelOrderRes() {}

// Ref: #/components/schemas/internal_server_error
type InternalServerError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServerError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServerError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServerError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServerError) SetMessage(val string) {
	s.Message = val
}

func (*InternalServerError) cancelOrderRes() {}
func (*InternalServerError) createOrderRes() {}
func (*InternalServerError) getOrderRes()    {}
func (*InternalServerError) payOrderRes()    {}

// Ref: #/components/schemas/not_found_error
type NotFoundError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundError) SetMessage(val string) {
	s.Message = val
}

func (*NotFoundError) cancelOrderRes() {}
func (*NotFoundError) getOrderRes()    {}
func (*NotFoundError) payOrderRes()    {}

// Ref: #/components/schemas/order_create_request
type OrderCreateRequest struct {
	// Индентификатор пользователя.
	UserUUID string `json:"user_uuid"`
	// Идентификаторы деталей.
	PartUuids []string `json:"part_uuids"`
}

// GetUserUUID returns the value of UserUUID.
func (s *OrderCreateRequest) GetUserUUID() string {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *OrderCreateRequest) GetPartUuids() []string {
	return s.PartUuids
}

// SetUserUUID sets the value of UserUUID.
func (s *OrderCreateRequest) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *OrderCreateRequest) SetPartUuids(val []string) {
	s.PartUuids = val
}

// Ref: #/components/schemas/order_create_response
type OrderCreateResponse struct {
	// Индентификатор заказа.
	OrderUUID string `json:"order_uuid"`
	// Общая стоимость заказа.
	TotalPrice float32 `json:"total_price"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *OrderCreateResponse) GetOrderUUID() string {
	return s.OrderUUID
}

// GetTotalPrice returns the value of TotalPrice.
func (s *OrderCreateResponse) GetTotalPrice() float32 {
	return s.TotalPrice
}

// SetOrderUUID sets the value of OrderUUID.
func (s *OrderCreateResponse) SetOrderUUID(val string) {
	s.OrderUUID = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *OrderCreateResponse) SetTotalPrice(val float32) {
	s.TotalPrice = val
}

func (*OrderCreateResponse) createOrderRes() {}

// Ref: #/components/schemas/order_get_response
type OrderGetResponse struct {
	// Индентификатор заказа.
	OrderUUID string `json:"order_uuid"`
	// Индентификатор пользователя.
	UserUUID string `json:"user_uuid"`
	// Идентификаторы деталей.
	PartUuids []string `json:"part_uuids"`
	// Общая стоимость заказа.
	TotalPrice float32 `json:"total_price"`
	// Индентификатор транзакции.
	TransactionUUID string `json:"transaction_uuid"`
	// Метод оплаты.
	PaymentMethod OrderGetResponsePaymentMethod `json:"payment_method"`
	// Статус заказа.
	Status OrderGetResponseStatus `json:"status"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *OrderGetResponse) GetOrderUUID() string {
	return s.OrderUUID
}

// GetUserUUID returns the value of UserUUID.
func (s *OrderGetResponse) GetUserUUID() string {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *OrderGetResponse) GetPartUuids() []string {
	return s.PartUuids
}

// GetTotalPrice returns the value of TotalPrice.
func (s *OrderGetResponse) GetTotalPrice() float32 {
	return s.TotalPrice
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *OrderGetResponse) GetTransactionUUID() string {
	return s.TransactionUUID
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *OrderGetResponse) GetPaymentMethod() OrderGetResponsePaymentMethod {
	return s.PaymentMethod
}

// GetStatus returns the value of Status.
func (s *OrderGetResponse) GetStatus() OrderGetResponseStatus {
	return s.Status
}

// SetOrderUUID sets the value of OrderUUID.
func (s *OrderGetResponse) SetOrderUUID(val string) {
	s.OrderUUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *OrderGetResponse) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *OrderGetResponse) SetPartUuids(val []string) {
	s.PartUuids = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *OrderGetResponse) SetTotalPrice(val float32) {
	s.TotalPrice = val
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *OrderGetResponse) SetTransactionUUID(val string) {
	s.TransactionUUID = val
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *OrderGetResponse) SetPaymentMethod(val OrderGetResponsePaymentMethod) {
	s.PaymentMethod = val
}

// SetStatus sets the value of Status.
func (s *OrderGetResponse) SetStatus(val OrderGetResponseStatus) {
	s.Status = val
}

func (*OrderGetResponse) getOrderRes() {}

// Метод оплаты.
type OrderGetResponsePaymentMethod string

const (
	OrderGetResponsePaymentMethodUNSPECIFIED   OrderGetResponsePaymentMethod = "UNSPECIFIED"
	OrderGetResponsePaymentMethodCARD          OrderGetResponsePaymentMethod = "CARD"
	OrderGetResponsePaymentMethodSBP           OrderGetResponsePaymentMethod = "SBP"
	OrderGetResponsePaymentMethodCREDITCARD    OrderGetResponsePaymentMethod = "CREDIT_CARD"
	OrderGetResponsePaymentMethodINVESTORMONEY OrderGetResponsePaymentMethod = "INVESTOR_MONEY"
)

// AllValues returns all OrderGetResponsePaymentMethod values.
func (OrderGetResponsePaymentMethod) AllValues() []OrderGetResponsePaymentMethod {
	return []OrderGetResponsePaymentMethod{
		OrderGetResponsePaymentMethodUNSPECIFIED,
		OrderGetResponsePaymentMethodCARD,
		OrderGetResponsePaymentMethodSBP,
		OrderGetResponsePaymentMethodCREDITCARD,
		OrderGetResponsePaymentMethodINVESTORMONEY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderGetResponsePaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case OrderGetResponsePaymentMethodUNSPECIFIED:
		return []byte(s), nil
	case OrderGetResponsePaymentMethodCARD:
		return []byte(s), nil
	case OrderGetResponsePaymentMethodSBP:
		return []byte(s), nil
	case OrderGetResponsePaymentMethodCREDITCARD:
		return []byte(s), nil
	case OrderGetResponsePaymentMethodINVESTORMONEY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderGetResponsePaymentMethod) UnmarshalText(data []byte) error {
	switch OrderGetResponsePaymentMethod(data) {
	case OrderGetResponsePaymentMethodUNSPECIFIED:
		*s = OrderGetResponsePaymentMethodUNSPECIFIED
		return nil
	case OrderGetResponsePaymentMethodCARD:
		*s = OrderGetResponsePaymentMethodCARD
		return nil
	case OrderGetResponsePaymentMethodSBP:
		*s = OrderGetResponsePaymentMethodSBP
		return nil
	case OrderGetResponsePaymentMethodCREDITCARD:
		*s = OrderGetResponsePaymentMethodCREDITCARD
		return nil
	case OrderGetResponsePaymentMethodINVESTORMONEY:
		*s = OrderGetResponsePaymentMethodINVESTORMONEY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Статус заказа.
type OrderGetResponseStatus string

const (
	OrderGetResponseStatusPAID           OrderGetResponseStatus = "PAID"
	OrderGetResponseStatusPENDINGPAYMENT OrderGetResponseStatus = "PENDING_PAYMENT"
	OrderGetResponseStatusCANCELLED      OrderGetResponseStatus = "CANCELLED"
)

// AllValues returns all OrderGetResponseStatus values.
func (OrderGetResponseStatus) AllValues() []OrderGetResponseStatus {
	return []OrderGetResponseStatus{
		OrderGetResponseStatusPAID,
		OrderGetResponseStatusPENDINGPAYMENT,
		OrderGetResponseStatusCANCELLED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderGetResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case OrderGetResponseStatusPAID:
		return []byte(s), nil
	case OrderGetResponseStatusPENDINGPAYMENT:
		return []byte(s), nil
	case OrderGetResponseStatusCANCELLED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderGetResponseStatus) UnmarshalText(data []byte) error {
	switch OrderGetResponseStatus(data) {
	case OrderGetResponseStatusPAID:
		*s = OrderGetResponseStatusPAID
		return nil
	case OrderGetResponseStatusPENDINGPAYMENT:
		*s = OrderGetResponseStatusPENDINGPAYMENT
		return nil
	case OrderGetResponseStatusCANCELLED:
		*s = OrderGetResponseStatusCANCELLED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/order_pay_request
type OrderPayRequest struct {
	// Метод оплаты.
	PaymentMethod OrderPayRequestPaymentMethod `json:"payment_method"`
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *OrderPayRequest) GetPaymentMethod() OrderPayRequestPaymentMethod {
	return s.PaymentMethod
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *OrderPayRequest) SetPaymentMethod(val OrderPayRequestPaymentMethod) {
	s.PaymentMethod = val
}

// Метод оплаты.
type OrderPayRequestPaymentMethod string

const (
	OrderPayRequestPaymentMethodUNSPECIFIED   OrderPayRequestPaymentMethod = "UNSPECIFIED"
	OrderPayRequestPaymentMethodCARD          OrderPayRequestPaymentMethod = "CARD"
	OrderPayRequestPaymentMethodSBP           OrderPayRequestPaymentMethod = "SBP"
	OrderPayRequestPaymentMethodCREDITCARD    OrderPayRequestPaymentMethod = "CREDIT_CARD"
	OrderPayRequestPaymentMethodINVESTORMONEY OrderPayRequestPaymentMethod = "INVESTOR_MONEY"
)

// AllValues returns all OrderPayRequestPaymentMethod values.
func (OrderPayRequestPaymentMethod) AllValues() []OrderPayRequestPaymentMethod {
	return []OrderPayRequestPaymentMethod{
		OrderPayRequestPaymentMethodUNSPECIFIED,
		OrderPayRequestPaymentMethodCARD,
		OrderPayRequestPaymentMethodSBP,
		OrderPayRequestPaymentMethodCREDITCARD,
		OrderPayRequestPaymentMethodINVESTORMONEY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderPayRequestPaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case OrderPayRequestPaymentMethodUNSPECIFIED:
		return []byte(s), nil
	case OrderPayRequestPaymentMethodCARD:
		return []byte(s), nil
	case OrderPayRequestPaymentMethodSBP:
		return []byte(s), nil
	case OrderPayRequestPaymentMethodCREDITCARD:
		return []byte(s), nil
	case OrderPayRequestPaymentMethodINVESTORMONEY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderPayRequestPaymentMethod) UnmarshalText(data []byte) error {
	switch OrderPayRequestPaymentMethod(data) {
	case OrderPayRequestPaymentMethodUNSPECIFIED:
		*s = OrderPayRequestPaymentMethodUNSPECIFIED
		return nil
	case OrderPayRequestPaymentMethodCARD:
		*s = OrderPayRequestPaymentMethodCARD
		return nil
	case OrderPayRequestPaymentMethodSBP:
		*s = OrderPayRequestPaymentMethodSBP
		return nil
	case OrderPayRequestPaymentMethodCREDITCARD:
		*s = OrderPayRequestPaymentMethodCREDITCARD
		return nil
	case OrderPayRequestPaymentMethodINVESTORMONEY:
		*s = OrderPayRequestPaymentMethodINVESTORMONEY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/order_pay_response
type OrderPayResponse struct {
	// Индентификатор транзакции.
	TransactionUUID string `json:"transaction_uuid"`
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *OrderPayResponse) GetTransactionUUID() string {
	return s.TransactionUUID
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *OrderPayResponse) SetTransactionUUID(val string) {
	s.TransactionUUID = val
}

func (*OrderPayResponse) cancelOrderRes() {}
func (*OrderPayResponse) payOrderRes()    {}
