// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Artyom099/factory/order/internal/service/model"
	mock "github.com/stretchr/testify/mock"
)

// IOrderService is an autogenerated mock type for the IOrderService type
type IOrderService struct {
	mock.Mock
}

type IOrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *IOrderService) EXPECT() *IOrderService_Expecter {
	return &IOrderService_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields: ctx, orderUuid
func (_m *IOrderService) Cancel(ctx context.Context, orderUuid string) (model.OrderCancelServiceResponseDto, error) {
	ret := _m.Called(ctx, orderUuid)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 model.OrderCancelServiceResponseDto
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.OrderCancelServiceResponseDto, error)); ok {
		return rf(ctx, orderUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.OrderCancelServiceResponseDto); ok {
		r0 = rf(ctx, orderUuid)
	} else {
		r0 = ret.Get(0).(model.OrderCancelServiceResponseDto)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderService_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type IOrderService_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUuid string
func (_e *IOrderService_Expecter) Cancel(ctx interface{}, orderUuid interface{}) *IOrderService_Cancel_Call {
	return &IOrderService_Cancel_Call{Call: _e.mock.On("Cancel", ctx, orderUuid)}
}

func (_c *IOrderService_Cancel_Call) Run(run func(ctx context.Context, orderUuid string)) *IOrderService_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IOrderService_Cancel_Call) Return(_a0 model.OrderCancelServiceResponseDto, _a1 error) *IOrderService_Cancel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOrderService_Cancel_Call) RunAndReturn(run func(context.Context, string) (model.OrderCancelServiceResponseDto, error)) *IOrderService_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, dto
func (_m *IOrderService) Create(ctx context.Context, dto model.OrderCreateServiceRequestDto) (model.OrderCreateServiceResponseDto, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.OrderCreateServiceResponseDto
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderCreateServiceRequestDto) (model.OrderCreateServiceResponseDto, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderCreateServiceRequestDto) model.OrderCreateServiceResponseDto); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(model.OrderCreateServiceResponseDto)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderCreateServiceRequestDto) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IOrderService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - dto model.OrderCreateServiceRequestDto
func (_e *IOrderService_Expecter) Create(ctx interface{}, dto interface{}) *IOrderService_Create_Call {
	return &IOrderService_Create_Call{Call: _e.mock.On("Create", ctx, dto)}
}

func (_c *IOrderService_Create_Call) Run(run func(ctx context.Context, dto model.OrderCreateServiceRequestDto)) *IOrderService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderCreateServiceRequestDto))
	})
	return _c
}

func (_c *IOrderService_Create_Call) Return(_a0 model.OrderCreateServiceResponseDto, _a1 error) *IOrderService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOrderService_Create_Call) RunAndReturn(run func(context.Context, model.OrderCreateServiceRequestDto) (model.OrderCreateServiceResponseDto, error)) *IOrderService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, dto
func (_m *IOrderService) Get(ctx context.Context, dto model.OrderGetServiceRequestDto) (model.OrderGetServiceResponseDto, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.OrderGetServiceResponseDto
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderGetServiceRequestDto) (model.OrderGetServiceResponseDto, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderGetServiceRequestDto) model.OrderGetServiceResponseDto); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(model.OrderGetServiceResponseDto)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderGetServiceRequestDto) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type IOrderService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - dto model.OrderGetServiceRequestDto
func (_e *IOrderService_Expecter) Get(ctx interface{}, dto interface{}) *IOrderService_Get_Call {
	return &IOrderService_Get_Call{Call: _e.mock.On("Get", ctx, dto)}
}

func (_c *IOrderService_Get_Call) Run(run func(ctx context.Context, dto model.OrderGetServiceRequestDto)) *IOrderService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderGetServiceRequestDto))
	})
	return _c
}

func (_c *IOrderService_Get_Call) Return(_a0 model.OrderGetServiceResponseDto, _a1 error) *IOrderService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOrderService_Get_Call) RunAndReturn(run func(context.Context, model.OrderGetServiceRequestDto) (model.OrderGetServiceResponseDto, error)) *IOrderService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Pay provides a mock function with given fields: ctx, dto
func (_m *IOrderService) Pay(ctx context.Context, dto model.OrderPayServiceRequestDto) (string, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderPayServiceRequestDto) (string, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderPayServiceRequestDto) string); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderPayServiceRequestDto) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderService_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type IOrderService_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//   - ctx context.Context
//   - dto model.OrderPayServiceRequestDto
func (_e *IOrderService_Expecter) Pay(ctx interface{}, dto interface{}) *IOrderService_Pay_Call {
	return &IOrderService_Pay_Call{Call: _e.mock.On("Pay", ctx, dto)}
}

func (_c *IOrderService_Pay_Call) Run(run func(ctx context.Context, dto model.OrderPayServiceRequestDto)) *IOrderService_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderPayServiceRequestDto))
	})
	return _c
}

func (_c *IOrderService_Pay_Call) Return(_a0 string, _a1 error) *IOrderService_Pay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOrderService_Pay_Call) RunAndReturn(run func(context.Context, model.OrderPayServiceRequestDto) (string, error)) *IOrderService_Pay_Call {
	_c.Call.Return(run)
	return _c
}

// NewIOrderService creates a new instance of IOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderService {
	mock := &IOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
