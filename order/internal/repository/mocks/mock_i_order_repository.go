// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Artyom099/factory/order/internal/repository/model"
	mock "github.com/stretchr/testify/mock"
)

// IOrderRepository is an autogenerated mock type for the IOrderRepository type
type IOrderRepository struct {
	mock.Mock
}

type IOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IOrderRepository) EXPECT() *IOrderRepository_Expecter {
	return &IOrderRepository_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields: ctx, orderUuid
func (_m *IOrderRepository) Cancel(ctx context.Context, orderUuid string) error {
	ret := _m.Called(ctx, orderUuid)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, orderUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IOrderRepository_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type IOrderRepository_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUuid string
func (_e *IOrderRepository_Expecter) Cancel(ctx interface{}, orderUuid interface{}) *IOrderRepository_Cancel_Call {
	return &IOrderRepository_Cancel_Call{Call: _e.mock.On("Cancel", ctx, orderUuid)}
}

func (_c *IOrderRepository_Cancel_Call) Run(run func(ctx context.Context, orderUuid string)) *IOrderRepository_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IOrderRepository_Cancel_Call) Return(_a0 error) *IOrderRepository_Cancel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IOrderRepository_Cancel_Call) RunAndReturn(run func(context.Context, string) error) *IOrderRepository_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, dto
func (_m *IOrderRepository) Create(ctx context.Context, dto model.RepoOrder) (string, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RepoOrder) (string, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RepoOrder) string); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RepoOrder) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IOrderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - dto model.RepoOrder
func (_e *IOrderRepository_Expecter) Create(ctx interface{}, dto interface{}) *IOrderRepository_Create_Call {
	return &IOrderRepository_Create_Call{Call: _e.mock.On("Create", ctx, dto)}
}

func (_c *IOrderRepository_Create_Call) Run(run func(ctx context.Context, dto model.RepoOrder)) *IOrderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.RepoOrder))
	})
	return _c
}

func (_c *IOrderRepository_Create_Call) Return(_a0 string, _a1 error) *IOrderRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOrderRepository_Create_Call) RunAndReturn(run func(context.Context, model.RepoOrder) (string, error)) *IOrderRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, orderUuid
func (_m *IOrderRepository) Get(ctx context.Context, orderUuid string) (model.RepoOrder, error) {
	ret := _m.Called(ctx, orderUuid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.RepoOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.RepoOrder, error)); ok {
		return rf(ctx, orderUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.RepoOrder); ok {
		r0 = rf(ctx, orderUuid)
	} else {
		r0 = ret.Get(0).(model.RepoOrder)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type IOrderRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUuid string
func (_e *IOrderRepository_Expecter) Get(ctx interface{}, orderUuid interface{}) *IOrderRepository_Get_Call {
	return &IOrderRepository_Get_Call{Call: _e.mock.On("Get", ctx, orderUuid)}
}

func (_c *IOrderRepository_Get_Call) Run(run func(ctx context.Context, orderUuid string)) *IOrderRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IOrderRepository_Get_Call) Return(_a0 model.RepoOrder, _a1 error) *IOrderRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOrderRepository_Get_Call) RunAndReturn(run func(context.Context, string) (model.RepoOrder, error)) *IOrderRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, dto
func (_m *IOrderRepository) Update(ctx context.Context, dto model.RepoOrder) error {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RepoOrder) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IOrderRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type IOrderRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - dto model.RepoOrder
func (_e *IOrderRepository_Expecter) Update(ctx interface{}, dto interface{}) *IOrderRepository_Update_Call {
	return &IOrderRepository_Update_Call{Call: _e.mock.On("Update", ctx, dto)}
}

func (_c *IOrderRepository_Update_Call) Run(run func(ctx context.Context, dto model.RepoOrder)) *IOrderRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.RepoOrder))
	})
	return _c
}

func (_c *IOrderRepository_Update_Call) Return(_a0 error) *IOrderRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IOrderRepository_Update_Call) RunAndReturn(run func(context.Context, model.RepoOrder) error) *IOrderRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewIOrderRepository creates a new instance of IOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderRepository {
	mock := &IOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
