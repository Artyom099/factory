// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/Artyom099/factory/order/internal/service/model"
)

// IInventoryClient is an autogenerated mock type for the IInventoryClient type
type IInventoryClient struct {
	mock.Mock
}

type IInventoryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *IInventoryClient) EXPECT() *IInventoryClient_Expecter {
	return &IInventoryClient_Expecter{mock: &_m.Mock}
}

// ListParts provides a mock function with given fields: ctx, filter
func (_m *IInventoryClient) ListParts(ctx context.Context, filter model.ListPartsFilter) (model.ListPartsResponseDto, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListParts")
	}

	var r0 model.ListPartsResponseDto
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ListPartsFilter) (model.ListPartsResponseDto, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.ListPartsFilter) model.ListPartsResponseDto); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(model.ListPartsResponseDto)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.ListPartsFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IInventoryClient_ListParts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListParts'
type IInventoryClient_ListParts_Call struct {
	*mock.Call
}

// ListParts is a helper method to define mock.On call
//   - ctx context.Context
//   - filter model.ListPartsFilter
func (_e *IInventoryClient_Expecter) ListParts(ctx interface{}, filter interface{}) *IInventoryClient_ListParts_Call {
	return &IInventoryClient_ListParts_Call{Call: _e.mock.On("ListParts", ctx, filter)}
}

func (_c *IInventoryClient_ListParts_Call) Run(run func(ctx context.Context, filter model.ListPartsFilter)) *IInventoryClient_ListParts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.ListPartsFilter))
	})
	return _c
}

func (_c *IInventoryClient_ListParts_Call) Return(_a0 model.ListPartsResponseDto, _a1 error) *IInventoryClient_ListParts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IInventoryClient_ListParts_Call) RunAndReturn(run func(context.Context, model.ListPartsFilter) (model.ListPartsResponseDto, error)) *IInventoryClient_ListParts_Call {
	_c.Call.Return(run)
	return _c
}

// NewIInventoryClient creates a new instance of IInventoryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIInventoryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IInventoryClient {
	mock := &IInventoryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
